{"ast":null,"code":"var _jsxFileName = \"/Users/zhangqian/Downloads/ticketing-page/ticketing-page/src/Components/CheckOut/CheckOutForm.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { CardElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet totalAmount;\nlet eventId;\nexport default function CheckoutForm(props) {\n  _s();\n\n  const [succeeded, setSucceeded] = useState(false);\n  const [error, setError] = useState(null);\n  const [processing, setProcessing] = useState('');\n  const [disabled, setDisabled] = useState(true);\n  const [clientSecret, setClientSecret] = useState('');\n  const stripe = useStripe();\n  const elements = useElements();\n  totalAmount = props.totalAmount.orderTotal;\n  console.log(totalAmount);\n  eventId = props.totalAmount.eventId;\n  console.log(eventId);\n  useEffect(() => {\n    // Create PaymentIntent as soon as the page loads\n    window.fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items: [{\n          id: \"xl-tshirt\",\n          totalAmount: props.totalA\n        }]\n      })\n    }).then(res => {\n      return res.json();\n    }).then(data => {\n      setClientSecret(data.clientSecret);\n    });\n  }, []);\n  const cardStyle = {\n    style: {\n      base: {\n        color: \"#32325d\",\n        fontFamily: 'Arial, sans-serif',\n        fontSmoothing: \"antialiased\",\n        fontSize: \"16px\",\n        \"::placeholder\": {\n          color: \"#32325d\"\n        }\n      },\n      invalid: {\n        color: \"#fa755a\",\n        iconColor: \"#fa755a\"\n      }\n    }\n  };\n\n  const handleChange = async event => {\n    // Listen for changes in the CardElement\n    // and display any errors as the customer types their card details\n    setDisabled(event.empty);\n    setError(event.error ? event.error.message : \"\");\n  };\n\n  const handleSubmit = async ev => {\n    ev.preventDefault();\n    setProcessing(true);\n    const payload = await stripe.confirmCardPayment(clientSecret, {\n      payment_method: {\n        card: elements.getElement(CardElement)\n      }\n    });\n\n    if (payload.error) {\n      setError(`Payment failed ${payload.error.message}`);\n      setProcessing(false);\n    } else {\n      setError(null);\n      setProcessing(false);\n      setSucceeded(true);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"checkoutContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"amountContainer\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You have to pay \", /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [\"NZ$\", totalAmount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 36\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      id: \"payment-form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(CardElement, {\n        className: \"checkoutInput\",\n        id: \"card-element\",\n        options: cardStyle,\n        onChange: handleChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"checkoutBtn\",\n        disabled: processing || disabled || succeeded,\n        id: \"submit\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"button-text\",\n          children: processing ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"spinner\",\n            id: \"spinner\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 23\n          }, this) : \"Pay now\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-error\",\n        role: \"alert\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: succeeded ? \"result-message\" : \"result-message hidden\",\n        children: [\"Payment succeeded, see the result in your\", /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `https://dashboard.stripe.com/test/payments`,\n          children: [\" \", \"Stripe dashboard.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 21\n        }, this), \" Refresh the page to pay again.\", /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/eTicket?id=\" + eventId,\n          children: \"Click here to see the eTicket\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n}\n\n_s(CheckoutForm, \"ldxvBX7QZH5+6XNpO6E4nXjWQL0=\", false, function () {\n  return [useStripe, useElements];\n});\n\n_c = CheckoutForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"sources":["/Users/zhangqian/Downloads/ticketing-page/ticketing-page/src/Components/CheckOut/CheckOutForm.jsx"],"names":["React","useState","useEffect","CardElement","useStripe","useElements","Link","totalAmount","eventId","CheckoutForm","props","succeeded","setSucceeded","error","setError","processing","setProcessing","disabled","setDisabled","clientSecret","setClientSecret","stripe","elements","orderTotal","console","log","window","fetch","method","headers","body","JSON","stringify","items","id","totalA","then","res","json","data","cardStyle","style","base","color","fontFamily","fontSmoothing","fontSize","invalid","iconColor","handleChange","event","empty","message","handleSubmit","ev","preventDefault","payload","confirmCardPayment","payment_method","card","getElement"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n    CardElement,\n    useStripe,\n    useElements\n} from \"@stripe/react-stripe-js\";\nimport {Link} from \"react-router-dom\";\n\nlet totalAmount;\nlet eventId;\nexport default function CheckoutForm(props) {\n    const [succeeded, setSucceeded] = useState(false);\n    const [error, setError] = useState(null);\n    const [processing, setProcessing] = useState('');\n    const [disabled, setDisabled] = useState(true);\n    const [clientSecret, setClientSecret] = useState('');\n    const stripe = useStripe();\n    const elements = useElements();\n    totalAmount = props.totalAmount.orderTotal;\n    console.log(totalAmount);\n    eventId = props.totalAmount.eventId;\n    console.log(eventId);\n    useEffect(() => {\n        // Create PaymentIntent as soon as the page loads\n        window\n            .fetch(\"/create-payment-intent\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({items: [\n                    {\n                        id: \"xl-tshirt\",\n                        totalAmount:props.totalA\n                    }]\n                })\n            })\n            .then(res => {\n                return res.json();\n            })\n            .then(data => {\n                setClientSecret(data.clientSecret);\n            });\n    }, []);\n\n    const cardStyle = {\n        style: {\n            base: {\n                color: \"#32325d\",\n                fontFamily: 'Arial, sans-serif',\n                fontSmoothing: \"antialiased\",\n                fontSize: \"16px\",\n                \"::placeholder\": {\n                    color: \"#32325d\"\n                }\n            },\n            invalid: {\n                color: \"#fa755a\",\n                iconColor: \"#fa755a\"\n            }\n        }\n    };\n\n    const handleChange = async (event) => {\n        // Listen for changes in the CardElement\n        // and display any errors as the customer types their card details\n        setDisabled(event.empty);\n        setError(event.error ? event.error.message : \"\");\n    };\n\n    const handleSubmit = async ev => {\n        ev.preventDefault();\n        setProcessing(true);\n\n        const payload = await stripe.confirmCardPayment(clientSecret, {\n            payment_method: {\n                card: elements.getElement(CardElement)\n            }\n        });\n\n        if (payload.error) {\n            setError(`Payment failed ${payload.error.message}`);\n            setProcessing(false);\n        } else {\n            setError(null);\n            setProcessing(false);\n            setSucceeded(true);\n        }\n    };\n\n    return (\n        <div className={\"checkoutContainer\"}>\n            <div className={\"amountContainer\"}>\n                <p>You have to pay <span>NZ${totalAmount}</span>.</p>\n            </div>\n            <form id=\"payment-form\" onSubmit={handleSubmit}>\n                <CardElement className={\"checkoutInput\"} id=\"card-element\" options={cardStyle} onChange={handleChange} />\n                <button\n                    className={\"checkoutBtn\"}\n                    disabled={processing || disabled || succeeded}\n                    id=\"submit\"\n                >\n                <span id=\"button-text\">\n                  {processing ? (\n                      <div className=\"spinner\" id=\"spinner\"></div>\n                  ) : (\n                      \"Pay now\"\n                  )}\n                </span>\n                </button>\n                {/* Show any error that happens when processing the payment */}\n                {error && (\n                    <div className=\"card-error\" role=\"alert\">\n                        {error}\n                    </div>\n                )}\n                {/* Show a success message upon completion */}\n                <p className={succeeded ? \"result-message\" : \"result-message hidden\"}>\n                    Payment succeeded, see the result in your\n                    <a\n                        href={`https://dashboard.stripe.com/test/payments`}\n                    >\n                        {\" \"}\n                        Stripe dashboard.\n                    </a> Refresh the page to pay again.\n                    <Link to={\"/eTicket?id=\"+eventId}>Click here to see the eTicket</Link>\n                </p>\n            </form>\n        </div>\n    );\n}\n"]},"metadata":{},"sourceType":"module"}